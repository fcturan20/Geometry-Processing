// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_PREPROCCESSMESH_H_
#define FLATBUFFERS_GENERATED_PREPROCCESSMESH_H_

#include "flatbuffers/flatbuffers.h"

struct VertexData;

struct GeodesicResource;

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) VertexData FLATBUFFERS_FINAL_CLASS {
 private:
  uint32_t VertexID_;
  float GeodesicVertex0Distance_;
  uint32_t GeodesicVertex0SampleID_;
  float GeodesicVertex1Distance_;
  uint32_t GeodesicVertex1SampleID_;
  float GeodesicVertex2Distance_;
  uint32_t GeodesicVertex2SampleID_;

 public:
  VertexData() {
    memset(static_cast<void *>(this), 0, sizeof(VertexData));
  }
  VertexData(uint32_t _VertexID, float _GeodesicVertex0Distance, uint32_t _GeodesicVertex0SampleID, float _GeodesicVertex1Distance, uint32_t _GeodesicVertex1SampleID, float _GeodesicVertex2Distance, uint32_t _GeodesicVertex2SampleID)
      : VertexID_(flatbuffers::EndianScalar(_VertexID)),
        GeodesicVertex0Distance_(flatbuffers::EndianScalar(_GeodesicVertex0Distance)),
        GeodesicVertex0SampleID_(flatbuffers::EndianScalar(_GeodesicVertex0SampleID)),
        GeodesicVertex1Distance_(flatbuffers::EndianScalar(_GeodesicVertex1Distance)),
        GeodesicVertex1SampleID_(flatbuffers::EndianScalar(_GeodesicVertex1SampleID)),
        GeodesicVertex2Distance_(flatbuffers::EndianScalar(_GeodesicVertex2Distance)),
        GeodesicVertex2SampleID_(flatbuffers::EndianScalar(_GeodesicVertex2SampleID)) {
  }
  uint32_t VertexID() const {
    return flatbuffers::EndianScalar(VertexID_);
  }
  float GeodesicVertex0Distance() const {
    return flatbuffers::EndianScalar(GeodesicVertex0Distance_);
  }
  uint32_t GeodesicVertex0SampleID() const {
    return flatbuffers::EndianScalar(GeodesicVertex0SampleID_);
  }
  float GeodesicVertex1Distance() const {
    return flatbuffers::EndianScalar(GeodesicVertex1Distance_);
  }
  uint32_t GeodesicVertex1SampleID() const {
    return flatbuffers::EndianScalar(GeodesicVertex1SampleID_);
  }
  float GeodesicVertex2Distance() const {
    return flatbuffers::EndianScalar(GeodesicVertex2Distance_);
  }
  uint32_t GeodesicVertex2SampleID() const {
    return flatbuffers::EndianScalar(GeodesicVertex2SampleID_);
  }
};
FLATBUFFERS_STRUCT_END(VertexData, 28);

struct GeodesicResource FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_FPSDISTANCES = 4,
    VT_FPSVERTEXINDEXES = 6,
    VT_VERTEXGEODESICS = 8
  };
  const flatbuffers::Vector<float> *FPSDistances() const {
    return GetPointer<const flatbuffers::Vector<float> *>(VT_FPSDISTANCES);
  }
  const flatbuffers::Vector<uint32_t> *FPSVertexIndexes() const {
    return GetPointer<const flatbuffers::Vector<uint32_t> *>(VT_FPSVERTEXINDEXES);
  }
  const flatbuffers::Vector<const VertexData *> *VertexGeodesics() const {
    return GetPointer<const flatbuffers::Vector<const VertexData *> *>(VT_VERTEXGEODESICS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_FPSDISTANCES) &&
           verifier.VerifyVector(FPSDistances()) &&
           VerifyOffset(verifier, VT_FPSVERTEXINDEXES) &&
           verifier.VerifyVector(FPSVertexIndexes()) &&
           VerifyOffset(verifier, VT_VERTEXGEODESICS) &&
           verifier.VerifyVector(VertexGeodesics()) &&
           verifier.EndTable();
  }
};

struct GeodesicResourceBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_FPSDistances(flatbuffers::Offset<flatbuffers::Vector<float>> FPSDistances) {
    fbb_.AddOffset(GeodesicResource::VT_FPSDISTANCES, FPSDistances);
  }
  void add_FPSVertexIndexes(flatbuffers::Offset<flatbuffers::Vector<uint32_t>> FPSVertexIndexes) {
    fbb_.AddOffset(GeodesicResource::VT_FPSVERTEXINDEXES, FPSVertexIndexes);
  }
  void add_VertexGeodesics(flatbuffers::Offset<flatbuffers::Vector<const VertexData *>> VertexGeodesics) {
    fbb_.AddOffset(GeodesicResource::VT_VERTEXGEODESICS, VertexGeodesics);
  }
  explicit GeodesicResourceBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  GeodesicResourceBuilder &operator=(const GeodesicResourceBuilder &);
  flatbuffers::Offset<GeodesicResource> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<GeodesicResource>(end);
    return o;
  }
};

inline flatbuffers::Offset<GeodesicResource> CreateGeodesicResource(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<float>> FPSDistances = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint32_t>> FPSVertexIndexes = 0,
    flatbuffers::Offset<flatbuffers::Vector<const VertexData *>> VertexGeodesics = 0) {
  GeodesicResourceBuilder builder_(_fbb);
  builder_.add_VertexGeodesics(VertexGeodesics);
  builder_.add_FPSVertexIndexes(FPSVertexIndexes);
  builder_.add_FPSDistances(FPSDistances);
  return builder_.Finish();
}

inline flatbuffers::Offset<GeodesicResource> CreateGeodesicResourceDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<float> *FPSDistances = nullptr,
    const std::vector<uint32_t> *FPSVertexIndexes = nullptr,
    const std::vector<VertexData> *VertexGeodesics = nullptr) {
  auto FPSDistances__ = FPSDistances ? _fbb.CreateVector<float>(*FPSDistances) : 0;
  auto FPSVertexIndexes__ = FPSVertexIndexes ? _fbb.CreateVector<uint32_t>(*FPSVertexIndexes) : 0;
  auto VertexGeodesics__ = VertexGeodesics ? _fbb.CreateVectorOfStructs<VertexData>(*VertexGeodesics) : 0;
  return CreateGeodesicResource(
      _fbb,
      FPSDistances__,
      FPSVertexIndexes__,
      VertexGeodesics__);
}

inline const GeodesicResource *GetGeodesicResource(const void *buf) {
  return flatbuffers::GetRoot<GeodesicResource>(buf);
}

inline const GeodesicResource *GetSizePrefixedGeodesicResource(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<GeodesicResource>(buf);
}

inline bool VerifyGeodesicResourceBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<GeodesicResource>(nullptr);
}

inline bool VerifySizePrefixedGeodesicResourceBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<GeodesicResource>(nullptr);
}

inline void FinishGeodesicResourceBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<GeodesicResource> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedGeodesicResourceBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<GeodesicResource> root) {
  fbb.FinishSizePrefixed(root);
}

#endif  // FLATBUFFERS_GENERATED_PREPROCCESSMESH_H_
