// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_JOBDATAS_H_
#define FLATBUFFERS_GENERATED_JOBDATAS_H_

#include "flatbuffers/flatbuffers.h"

struct Vec3f;

struct RecMesh;

struct Resource;

enum Resource_Type {
  Resource_Type_NONE = 0,
  Resource_Type_ReconstructedMesh = 1,
  Resource_Type_MIN = Resource_Type_NONE,
  Resource_Type_MAX = Resource_Type_ReconstructedMesh
};

inline const Resource_Type (&EnumValuesResource_Type())[2] {
  static const Resource_Type values[] = {
    Resource_Type_NONE,
    Resource_Type_ReconstructedMesh
  };
  return values;
}

inline const char * const *EnumNamesResource_Type() {
  static const char * const names[3] = {
    "NONE",
    "ReconstructedMesh",
    nullptr
  };
  return names;
}

inline const char *EnumNameResource_Type(Resource_Type e) {
  if (e < Resource_Type_NONE || e > Resource_Type_ReconstructedMesh) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesResource_Type()[index];
}

template<typename T> struct Resource_TypeTraits {
  static const Resource_Type enum_value = Resource_Type_NONE;
};

template<> struct Resource_TypeTraits<RecMesh> {
  static const Resource_Type enum_value = Resource_Type_ReconstructedMesh;
};

bool VerifyResource_Type(flatbuffers::Verifier &verifier, const void *obj, Resource_Type type);
bool VerifyResource_TypeVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) Vec3f FLATBUFFERS_FINAL_CLASS {
 private:
  float x_;
  float y_;
  float z_;

 public:
  Vec3f() {
    memset(static_cast<void *>(this), 0, sizeof(Vec3f));
  }
  Vec3f(float _x, float _y, float _z)
      : x_(flatbuffers::EndianScalar(_x)),
        y_(flatbuffers::EndianScalar(_y)),
        z_(flatbuffers::EndianScalar(_z)) {
  }
  float x() const {
    return flatbuffers::EndianScalar(x_);
  }
  float y() const {
    return flatbuffers::EndianScalar(y_);
  }
  float z() const {
    return flatbuffers::EndianScalar(z_);
  }
};
FLATBUFFERS_STRUCT_END(Vec3f, 12);

struct RecMesh FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_POSITIONS = 4,
    VT_NORMALS = 6,
    VT_RECONSTRUCTIONTYPE = 8,
    VT_KNN = 10
  };
  const flatbuffers::Vector<const Vec3f *> *Positions() const {
    return GetPointer<const flatbuffers::Vector<const Vec3f *> *>(VT_POSITIONS);
  }
  const flatbuffers::Vector<const Vec3f *> *Normals() const {
    return GetPointer<const flatbuffers::Vector<const Vec3f *> *>(VT_NORMALS);
  }
  uint8_t ReconstructionType() const {
    return GetField<uint8_t>(VT_RECONSTRUCTIONTYPE, 0);
  }
  uint8_t KNN() const {
    return GetField<uint8_t>(VT_KNN, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_POSITIONS) &&
           verifier.VerifyVector(Positions()) &&
           VerifyOffset(verifier, VT_NORMALS) &&
           verifier.VerifyVector(Normals()) &&
           VerifyField<uint8_t>(verifier, VT_RECONSTRUCTIONTYPE) &&
           VerifyField<uint8_t>(verifier, VT_KNN) &&
           verifier.EndTable();
  }
};

struct RecMeshBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_Positions(flatbuffers::Offset<flatbuffers::Vector<const Vec3f *>> Positions) {
    fbb_.AddOffset(RecMesh::VT_POSITIONS, Positions);
  }
  void add_Normals(flatbuffers::Offset<flatbuffers::Vector<const Vec3f *>> Normals) {
    fbb_.AddOffset(RecMesh::VT_NORMALS, Normals);
  }
  void add_ReconstructionType(uint8_t ReconstructionType) {
    fbb_.AddElement<uint8_t>(RecMesh::VT_RECONSTRUCTIONTYPE, ReconstructionType, 0);
  }
  void add_KNN(uint8_t KNN) {
    fbb_.AddElement<uint8_t>(RecMesh::VT_KNN, KNN, 0);
  }
  explicit RecMeshBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  RecMeshBuilder &operator=(const RecMeshBuilder &);
  flatbuffers::Offset<RecMesh> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<RecMesh>(end);
    return o;
  }
};

inline flatbuffers::Offset<RecMesh> CreateRecMesh(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<const Vec3f *>> Positions = 0,
    flatbuffers::Offset<flatbuffers::Vector<const Vec3f *>> Normals = 0,
    uint8_t ReconstructionType = 0,
    uint8_t KNN = 0) {
  RecMeshBuilder builder_(_fbb);
  builder_.add_Normals(Normals);
  builder_.add_Positions(Positions);
  builder_.add_KNN(KNN);
  builder_.add_ReconstructionType(ReconstructionType);
  return builder_.Finish();
}

inline flatbuffers::Offset<RecMesh> CreateRecMeshDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<Vec3f> *Positions = nullptr,
    const std::vector<Vec3f> *Normals = nullptr,
    uint8_t ReconstructionType = 0,
    uint8_t KNN = 0) {
  auto Positions__ = Positions ? _fbb.CreateVectorOfStructs<Vec3f>(*Positions) : 0;
  auto Normals__ = Normals ? _fbb.CreateVectorOfStructs<Vec3f>(*Normals) : 0;
  return CreateRecMesh(
      _fbb,
      Positions__,
      Normals__,
      ReconstructionType,
      KNN);
}

struct Resource FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TYPE_TYPE = 4,
    VT_TYPE = 6
  };
  Resource_Type TYPE_type() const {
    return static_cast<Resource_Type>(GetField<uint8_t>(VT_TYPE_TYPE, 0));
  }
  const void *TYPE() const {
    return GetPointer<const void *>(VT_TYPE);
  }
  template<typename T> const T *TYPE_as() const;
  const RecMesh *TYPE_as_ReconstructedMesh() const {
    return TYPE_type() == Resource_Type_ReconstructedMesh ? static_cast<const RecMesh *>(TYPE()) : nullptr;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_TYPE_TYPE) &&
           VerifyOffset(verifier, VT_TYPE) &&
           VerifyResource_Type(verifier, TYPE(), TYPE_type()) &&
           verifier.EndTable();
  }
};

template<> inline const RecMesh *Resource::TYPE_as<RecMesh>() const {
  return TYPE_as_ReconstructedMesh();
}

struct ResourceBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_TYPE_type(Resource_Type TYPE_type) {
    fbb_.AddElement<uint8_t>(Resource::VT_TYPE_TYPE, static_cast<uint8_t>(TYPE_type), 0);
  }
  void add_TYPE(flatbuffers::Offset<void> TYPE) {
    fbb_.AddOffset(Resource::VT_TYPE, TYPE);
  }
  explicit ResourceBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ResourceBuilder &operator=(const ResourceBuilder &);
  flatbuffers::Offset<Resource> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Resource>(end);
    return o;
  }
};

inline flatbuffers::Offset<Resource> CreateResource(
    flatbuffers::FlatBufferBuilder &_fbb,
    Resource_Type TYPE_type = Resource_Type_NONE,
    flatbuffers::Offset<void> TYPE = 0) {
  ResourceBuilder builder_(_fbb);
  builder_.add_TYPE(TYPE);
  builder_.add_TYPE_type(TYPE_type);
  return builder_.Finish();
}

inline bool VerifyResource_Type(flatbuffers::Verifier &verifier, const void *obj, Resource_Type type) {
  switch (type) {
    case Resource_Type_NONE: {
      return true;
    }
    case Resource_Type_ReconstructedMesh: {
      auto ptr = reinterpret_cast<const RecMesh *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return false;
  }
}

inline bool VerifyResource_TypeVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyResource_Type(
        verifier,  values->Get(i), types->GetEnum<Resource_Type>(i))) {
      return false;
    }
  }
  return true;
}

inline const Resource *GetResource(const void *buf) {
  return flatbuffers::GetRoot<Resource>(buf);
}

inline const Resource *GetSizePrefixedResource(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<Resource>(buf);
}

inline bool VerifyResourceBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Resource>(nullptr);
}

inline bool VerifySizePrefixedResourceBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Resource>(nullptr);
}

inline void FinishResourceBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Resource> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedResourceBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Resource> root) {
  fbb.FinishSizePrefixed(root);
}

#endif  // FLATBUFFERS_GENERATED_JOBDATAS_H_
